services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15
    container_name: movies_db
    environment:
      POSTGRES_DB: movies_app
      POSTGRES_USER: movies_user
      POSTGRES_PASSWORD: movies_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - movies_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U movies_user -d movies_app"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Backend API (Node.js/Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: movies_backend
    environment:
      DATABASE_URL: postgresql://movies_user:movies_password@postgres:5432/movies_app
      TMDB_API_KEY: ${TMDB_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: development
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - movies_network
    volumes:
      - ./backend:/app
      - /app/node_modules
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: movies_frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - movies_network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped

  # Nginx como proxy reverso y para servir archivos est√°ticos
  nginx:
    image: nginx:alpine
    container_name: movies_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - movies_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  movies_network:
    driver: bridge